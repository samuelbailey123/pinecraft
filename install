#!/bin/bash

# Pinecraft Installer Script
pcver="4.0"

# Verify the script is running as root
[[ $EUID -ne 0 ]] && echo "ERROR: This script must be run as root" >&2 && exit 1

# Define script and current working directory
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
base=$(pwd)

# Initialize update flag
updated=0

# Helper function for installing dependencies
install_dependency() {
  local pkg=$1
  if ! dpkg-query -W -f='${Status}' $pkg | grep -q "ok installed"; then
    [[ $updated -eq 0 ]] && apt-get update >/dev/null 2>&1 && updated=1
    apt-get install -y $pkg >/dev/null 2>&1
  fi
}

# Ensure dialog, wget, git, screen, and cron are installed
install_dependency "dialog"
install_dependency "wget"
install_dependency "git"
install_dependency "screen"
install_dependency "cron"

# Welcome message
dialog --title "Pinecraft Installer $pcver" --msgbox "Welcome to Pinecraft Installer $pcver." 10 60

# Checking dependencies message
dialog --infobox "Checking dependencies..." 3 34 && sleep 2

# Java version requirements
javaminver=8
javamaxver=17

# Function to validate installed Java version
validate_java_version() {
  local java_cmd="java"

  # Check if JAVA_HOME is set and if java is executable
  [[ -n "$JAVA_HOME" && -x "$JAVA_HOME/bin/java" ]] && java_cmd="$JAVA_HOME/bin/java"

  # Get Java version string
  local version_string=$($java_cmd -version 2>&1 | awk -F '"' '/version/ {print $2}')
  # Extract the major Java version
  local major_version=$(echo "$version_string" | awk -F'[._]' '{print $1=="1" ? $2 : $1}')

  # Compare version and prompt for upgrade if lower than minimum required version
  if [[ $major_version -lt $javaminver ]]; then
    dialog --title "Error" --msgbox "\nJava version $version_string is installed. Upgrade to at least JRE version $javaminver." 8 50
    return 1
  fi
  return 0
}

# Initialize update flag
updated=0

# Validate and install Java if necessary
if ! validate_java_version; then
  # Loop through Java versions to install from highest to lowest until successful validation
  for (( ver=$javamaxver; ver>=$javaminver; ver-- )); do
      if [[ $updated -eq 0 ]]; then
          apt-get update >/dev/null 2>&1
          updated=1
      fi
      apt-get install -y "openjdk-${ver}-jre-headless" >/dev/null 2>&1
      if validate_java_version; then
        break
      fi
  done
fi

# Final Java validation after install attempts
validate_java_version || exit 1

# Unset git autocrlf setting
git config --global --unset core.autocrlf

# Set Minecraft version based on Java version `ver`
mcver="1.16.5"
(( ver >= 17 )) && mcver="1.20.2"
(( ver >= 16 && ver < 17 )) && mcver="1.17.1"

# Get valid Linux user; default to current user if no argument is given
user=${1:-$(whoami)}

# Loop until a valid user is selected
while ! id "$user" &>/dev/null; do
  # Map usernames to menu options if the minecraft directory exists in their home
  options=()
  while IFS=: read -r username _ pw_dir; do
    [[ -d "$pw_dir/minecraft" ]] && options+=("$username" "$pw_dir/minecraft/")
  done < <(getent passwd)

  user=$(dialog --title "Linux User" --menu "Select the Linux user to run the Minecraft Server:" 20 50 10 "${options[@]}" 3>&1 1>&2 2>&3)

  [[ $? -ne 0 ]] && { echo is not a Pinecraft installation. 12 50; exit 0; }
  selection=$(dialog --title "Pinecraft Installer $pcver" --menu "Pinecraft is already installed:" 9 40 4 "U" "Upgrade Software (Keep World)" "R" "Remove and Reinstall" 3>&1 1>&2 2>&3)
  [[ $selection == "U" ]] && upgrade=1
  [[ $selection == "R" ]] && { dialog --title "Confirmation" --yesno "This will remove your entire previous installation. Continue?" 12 50 || exit 1; replace=1; }
fi

# Fresh install: handle seed and version choices
if (( upgrade == 0 )); then
  declare -A seeds=(["A"]="" ["B"]="custom" ["C"]="-4385290424787160722") # More mappings...
  declare -A versions=(["A"]="1.16.5" ["B"]="1.17.1" ["C"]="1.16.5")     # More mappings...

  selection=$(dialog --title "Pinecraft Installer $pcver" --menu "Choose your game seed:" 20 50 10 3>&1 1>&2 2>&3)
  [[ -z $selection ]] && { echo "Aborted."; exit 1; }
  seed=${seeds[$selection]}
  mcver=${versions[$selection]}
  [[ $seed == "custom" ]] && seed=$(dialog --stdout --title "Custom Seed" --inputbox "Enter your custom world seed:" 8 50)
fi

declare -A vanilla_servers=(
  ["1.20.2"]="https://piston-data.mojang.com/v1/objects/5b868151bd02b41319f54c8d4061b8cae84e665c/server.jar"
  ["1.20.1"]="https://piston-data.mojang.com/v1/objects/84194a2f286ef7c14ed7ce0090dba59902951553/server.jar"
  ["1.19.4"]="https://piston-data.mojang.com/v1/objects/8f3112a1049751cc472ec13e397eade5336ca7ae/server.jar"
  ["1.19.3"]="https://piston-data.mojang.com/v1/objects/c9df48efed58511cdd0213c56b9013a7b5c9ac1f/server.jar"
  ["1.19.2"]="https://piston-data.mojang.com/v1/objects/f69c284232d7c7580bd89a5a4931c3581eae1378/server.jar"
  ["1.19"]="https://launcher.mojang.com/v1/objects/e00c4052dac1d59a1188b2aa9d5a87113aaf1122/server.jar"
  ["1.18.2"]="https://launcher.mojang.com/v1/objects/c8f83c5655308435b3dcf03c06d9fe8740a77469/server.jar"
  ["1.18.1"]="https://launcher.mojang.com/v1/objects/125e5adf40c659fd3bce3e66e67a16bb49ecc1b9/server.jar"
  ["1.18"]="https://launcher.mojang.com/v1/objects/3cf24a8694aca6267883b17d934efacc5e44440d/server.jar"
  ["1.17.1"]="https://launcher.mojang.com/v1/objects/a16d67e5807f57fc4e550299cf20226194497dc2/server.jar"
  ["1.17"]="https://launcher.mojang.com/v1/objects/0a269b5f2c5b93b1712d0f5dc43b6182b9ab254e/server.jar"
  ["1.16.5"]="https://launcher.mojang.com/v1/objects/1b557e7b033b583cd9f66746b7a9ab1ec1673ced/server.jar"
)

# Get the URL based on the Minecraft version, or fall back to the default version
vanilla="${vanilla_servers[$mcver]:-${vanilla_servers["1.16.5"]}}"
flavor=""

declare -a flavors=()

# If $mcverANY is set to "1" or if $mcver is among the specified versions,
# the corresponding flavors are made available for selection.
if [[ $mcverANY == "1" ]] || [[ $mcver =~ ^(1\.17\.1|1\.17|1\.16\.5|1\.18\.1|1\.18\.2|1\.18|1\.19\.2|1\.19\.3|1\.19\.4|1\.19|1\.20\.1|1\.20\.2)$ ]]; then
  flavors+=("P" "Paper (Default, ${mcver})")
  flavors+=("R" "Forge (${mcver})")
  flavors+=("V" "Vanilla (${mcver})")
fi

# Adds Fabric as an option if the conditions are met, which requires version 1.14.0 or higher.
if [[ $mcverANY == "1" ]] || [ $(version "$mcver") -ge $(version "1.14.0") ]; then
  flavors+=("F" "Fabric (${mcver})")
fi

# Adds Spigot if the conditions are met, which requires version 1.9 or higher.
if [[ $mcverANY == "1" ]] || [ $(version "$mcver") -ge $(version "1.9") ]; then
  flavors+=("S" "Spigot (${mcver})")
fi

# Cuberite is only supported in version 1.12
if [[ $mcverANY == "1" ]] || [[ $mcver == "1.12.2" ]]; then
  flavors+=("C" "Cuberite (1.12)")
fi

# Dialog to choose the server type
exec 3>&1
result=$(dialog --title "Pinecraft Installer $pcver" \
    --menu "Choose your Minecraft server type:" 20 40 10 "${flavors[@]}" 2>&1 1>&3)
exec 3>&-

# Exit if dialog is canceled
if [[ $? -ne 0 ]]; then
    echo "Installation aborted."
    exit 1
fi

# Set variables based on the selected Minecraft server type
case $result in
    "S")
        flavor="Spigot"
        url="https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar"
        jarname="spigot-*.jar"
        switches="--rev ${mcver}"
        ;;
    "F")
        flavor="Fabric"
        url="https://maven.fabricmc.net/net/fabricmc/fabric-installer/0.11.2/fabric-installer-0.11.2.jar"
        jarname="fabric-server-launch.jar"
        switches="server -mcversion ${mcver} -downloadMinecraft"
        ;;
    "R")
        flavor="Forge"
        # Retrieve the Forge installer URL based on the Minecraft version
        declare -A forge_urls=(
            ["1.20.2"]="https://maven.minecraftforge.net/net/minecraftforge/forge/1.20.2-48.0.23/forge-1.20.2-48.0.23-installer.jar"
            ["1.20.1"]="https://maven.minecraftforge.net/net/minecraftforge/forge/1.20.1-47.2.1/forge-1.20.1-47.2.1-installer.jar"
        )
        url="${forge_urls[$mcver]}"
        jarname="forge-installer.jar"
        switches="--installServer ."
        ;;
    "V")
        flavor="Vanilla"
        url=$vanilla
        jarname="server.jar"
        switches=""
        ;;
    "P")
        flavor="Paper"
        # Construct the PaperMC download URL based on the Minecraft version
        paper_base_url="https://api.papermc.io/v2/projects/paper/versions"
        # Define a function to build the full PaperMC URL with a selected version and build number
        paper_url() {
            local version="$1"
            local build="$2"
            echo "$paper_base_url/$version/builds/$build/downloads/paper-$version-$build.jar"
        }
        # PaperMC URLs for each version:
        url=$(paper_url "1.20.2" "233")  # Example for Minecraft 1.20.2
        # ... other versions ...
        jarname="minecraft.jar"
        switches=""
        ;;
    "C")
        flavor="Cuberite"
        mcver="1.12" # Specific to Cuberite
        script="https://compile.cuberite.org"
        executable="Cuberite"
        compiler=1
        ;;
    *)
        echo "Invalid selection or operation canceled."
        exit 1
        ;;
esac

# Abort if no flavor was selected
if [[ -z $flavor ]]; then
    echo "No server type selected. Exiting installation."
    exit 1
fi

exec 3>&1
gamemode_choice=$(dialog --title "Pinecraft Installer $pcver $mcver" \
                  --menu "Choose your game type:" 20 40 10 \
                  "S" "Survival" \
                  "C" "Creative" \
                  2>&1 1>&3)
exec 3>&-  # Close the file descriptor

# Process the user's selection
if [[ $? -eq 0 ]]; then
  case $gamemode_choice in
    S)
      gamemode="survival"
      ;;
    C)
      gamemode="creative"
      ;;
    *)
      # Handle unexpected outcome
      echo "Invalid selection made."
      exit 1
      ;;
  esac
else
  # The user has cancelled the operation
  echo "The game type selection was aborted."
  exit 1
fi

# Prompt the user to read and accept the EULA
if dialog --title "End-User License Agreement" --yesno \
     "In order to proceed, you must read and accept the EULA at https://account.mojang.com/documents/minecraft_eula\n\nDo you accept the EULA?" 8 60; then
  # User accepted the EULA
  eula="accepted"
  eula_stamp=$(date)
else
  # User did not accept the EULA
  echo -e "\nEULA not accepted. You are not permitted to install this software.\n"
  exit 1
fi

# Gather system information for configuration
revision=$(awk '/Revision/ {print $3}' /proc/cpuinfo)
revision=${revision:-$(awk '/Hardware/ {print $4}' /proc/cpuinfo)}
board="Unknown" # will be overridden if determined

# Get memory information in kilobytes
meminfo=( $(awk '/MemTotal|MemAvailable/ {print $2}' /proc/meminfo) )
memtotal=${meminfo[0]}
memavail=${meminfo[1]}

# Calculate memory usage to make dynamic decisions
memvariance=$(( memtotal - memavail ))

# Amount of memory for the game in megabytes, reserving 20% for the system and subtracting 518MB buffer
mem=$(( (memtotal - memvariance) / 1024 - 518 ))
memreservation=$(( memavail / 5 / 1024 )) # 20% system reservation
gamemem=$(( mem - memreservation ))

# Calculate a minimum amount of memory to allocate, ensuring the game server has at least 2GB
gamememMIN=$(( mem * 4 / 5 - 1024 )) # 80% of available memory - 1GB for the system

# Cap the max game memory at 12GB
if (( gamemem > 12000 )); then
  gamemem=12288
  gamememMIN=1500
fi

# Set overclocking values (default)
oc_volt=0
oc_friendly="N/A"

# If available memory is too low, display an error message with dialog
if (( gamememMIN < 0 )); then
  memavailMB=$(( memavail / 1024 ))
  dialog --title "Error" --msgbox \
    "YOU DON'T HAVE ENOUGH AVAILABLE RAM\n\nYour system shows only ${memavailMB}MB RAM available, but with the applications running you have only ${mem} MB RAM available for allocation, which doesn't leave enough for overhead. Typically at least 2GB RAM is needed.\n\nEither you have other things running, or your board is not sufficient to run a Minecraft server." 18 50

  echo -e "\nFailed. Not enough memory available for the Minecraft server.\n"
  exit 0
fi

# Determine specific board type based on revision codes
if [[ "$revision" =~ ^[abcd]0311[1245]$ ]]; then
    board='Raspberry Pi 4'
    boardnum=1
    oc_volt=4
    oc_freq=1900
    oc_friendly="1.9 GHz"
elif [[ "$revision" == "c03130" ]]; then
    board='Raspberry Pi 400'
    boardnum=2
    oc_volt=6
    oc_freq=2000
    oc_friendly="2.0 GHz"
elif [[ "$revision" == *VIM4 ]]; then
    board='Khadas VIM4'
    boardnum=3
    oc_friendly="Not Required"
fi

# Check if the game should adjust memory due to a 32-bit OS on a 64-bit machine
if (( gamemem > 3800 )); then
    kernel=$(uname -m) # Use uname -m to check the architecture directly

    # If we're not on a 64-bit kernel, restrict memory usage
    if [[ ! "$kernel" == "x86_64" ]] && [[ ! "$kernel" == "aarch64" ]] && [[ ! "$kernel" == "arm64" ]]; then
        dialog --title "Warning" \
        --msgbox "\nWARNING: 32-Bit OS on 64-Bit Board!\n\nUpgrade your distro to 64-bit to use your RAM.\n\nSince you're only using a 32-bit OS, you cannot use more than 4 GB RAM for Minecraft. Abort and Upgrade." 13 50

        # Restrict memory usage
        gamemem=2500
        gamememMIN=1500
    fi
elif (( gamememMIN < 1024 )); then
    # If memory is less than the minimum, warn the user and offer to abort
    if dialog --title "Warning" --yesno "\nWARNING: Low available memory. It is recommended you abort. Install only on a dedicated system with no desktop environment or other applications running.\n\nWould you like to ABORT?" 14 50; then
        echo -e "\nAborted.\n"
        exit 1
    fi
fi

if dialog --title "Pinecraft Installer $pcver" --yesno "Automatically load the server on boot?" 6 60; then
    cron=1  # User chose to automatically load the server on boot
else
    cron=0  # User chose not to automatically load the server on boot
fi

dialog --title "Information" \
  --msgbox "\nDetected Hardware: $board\n\nRAM to Allocate: ${gamememMIN##*( )}MB - ${gamemem##*( )}MB\n\nOverclock To: $oc_friendly\n\nServer User: $user\n\nServer Version: $flavor $mcver ($gamemode)" 20 50

# If overclock voltage is not zero, prompt for overclocking confirmation
if [[ $oc_volt != 0 ]]; then
  if ! dialog --title "Confirmation" --yesno "\nI will be modifying ${configfile} to overclock this ${board}. I am not responsible for damage to your system, and you do this at your own risk.\n\nContinue?" 12 50; then
    echo -e "\nAborted.\n"
    exit 1
  fi
fi

###############################################
# Finished Asking Questions: Begin Installation
###############################################

# Stop the server if an upgrade or a replacement is required
if [[ $upgrade -eq 1 || $replace -eq 1 ]]; and [[ -e "${instdir}stop" ]]; then
    dialog --infobox "Stopping server..." 3 22
    su - "$user" -c "${instdir}stop" >/dev/null 2>&1
fi

# If a replacement was chosen, create a backup and remove the old installation
if [[ $replace -eq 1 ]]; then
    local backup_name="pinecraft_backup_$(date +"%Y-%m-%d-%H-%M").tar.gz"
    local backup_dir="${instdir}.."

    dialog --infobox "Creating backup in ${backup_dir}..." 3 40
    tar -czvf "${backup_dir}/${backup_name}" "$instdir" >/dev/null 2>&1

    dialog --infobox "Removing old installation..." 3 27
    rm -rf "$instdir"
    sleep 2
fi

# Prepare the installation directory for a new install
[[ $upgrade -eq 0 ]] && mkdir -p "$instdir"
cd "$instdir"

# Clear src directory if an upgrade is being done
[[ $upgrade -eq 1 ]] && rm -rf src
mkdir -p src && cd src

# Install the tools needed to compile C code, if the compiler flag is set
if [[ $compiler -eq 1 ]]; then
    # Define a function for installing packages if needed
    install_if_needed() {
        local pkg=$1
        if ! dpkg-query -W -f='${Status}' "$pkg" | grep -q "ok installed"; then
            dialog --infobox "Installing $pkg..." 3 34
            apt-get install -y "$pkg" >/dev/null 2>&1
        fi
    }

    # Library and package installation checks
    install_if_needed gcc
    install_if_needed g++
    install_if_needed cmake

    # Reload apt-update only if an update has not been done yet
    if [[ $updated -eq 0 ]]; then
        apt-get update >/dev/null 2>&1
        updated=1
    fi
fi


# Download the vanilla server if required
if [[ "$dlvanilla" == "1" ]]; then
  dialog --infobox "Downloading Vanilla..." 3 34
  wget "$vanilla" -O "${instdir}server.jar" >/dev/null 2>&1
fi

# Notify user of the flavor being downloaded
dialog --infobox "Downloading ${flavor}..." 3 34
sleep 1

# Download the Minecraft server jar or script based on selection
if [[ -n $jarname ]]; then
  wget "$url" -O minecraft.jar >/dev/null 2>&1
elif [[ -n $script ]]; then
  wget "$script" -O minecraft.sh >/dev/null 2>&1
else
  echo "No download source available."
  exit 1
fi

# Install the chosen flavor
dialog --infobox "Installing ${flavor}..." 3 34
if [[ $url == "$vanilla" ]]; then
  cp minecraft.jar server.jar  # Vanilla server already downloaded
elif [[ $flavor == "Cuberite" ]]; then
  sh minecraft.sh -m Release -t 1
  [[ $? -ne 0 ]] && { \
    dialog --title "Error" --msgbox "\nIt appears compiling failed." 8 50; \
    exit 1; \
  }
  mv cuberite/build-cuberite/Server/* "$instdir"
else
  java -Xmx500M -jar minecraft.jar $switches >/dev/null 2>&1
fi

# Check for Forge and include the server.jar
[[ -e "${instdir}src/server.jar" ]] && cp -f "${instdir}src/server.jar" "$instdir"

# Handle Forge-specific actions
[[ $flavor == "Forge" ]] && jarname="minecraft.jar"

# Verify the correct server jar file was downloaded and move it
jarfile=$(ls "${instdir}src/${jarname}")
[[ -z $jarfile ]] && { \
  dialog --title "Error" --msgbox "\nIt appears compiling failed." 8 50; \
  exit 1; \
}

cp "$jarfile" "$instdir"
t=${jarfile#*-}
version=$(basename "$t" .jar)

# Install PHP interpreter if psi flag is set
if [[ $psi -eq 1 ]]; then
  ! dpkg-query -W -f='${Status}' php | grep -q "ok installed" && apt-get install -y php-cli >/dev/null 2>&1
  mkdir -p /etc/pinecraft/psi
  cp "${base}/assets/psi/*" /etc/pinecraft/psi/
  printf '{"pcver":"%s","instdir":"%s","flavor":"%s"}\n' "$pcver" "$instdir" "$flavor" > /etc/pinecraft/psi/psi.json
  chown -R "$user:$user" /etc/pinecraft/
fi

###############################################
# Patch Minecraft against exploit within Log4j
# See https://www.minecraft.net/en-us/article/important-message--security-vulnerability-java-edition?ref=launcher
###############################################

# Initialize CLI arguments for dealing with the Log4j exploit based on Minecraft server version
cli_args=""

# 1.17-1.18 versions: Setting a system property to mitigate Log4j vulnerabilities
if [[ then
    cli_args="-Dlog4j2.formatMsgNoLookups=true"
fi

# 1.12-1.16.5 versions: Downloading the patched log4j configuration file
if [[ $(version "$mcver") -ge $(version "1.12") ]] && [[ $(version "$mcver") -le $(version "1.16.5") ]]; then
    wget https://launcher.mojang.com/v1/objects/02937d122c86ce73319ef9975b58896fc1b491d1/log4j2_112-116.xml -O "${instdir}log4j2_112-116.xml" >/dev/null 2>&1
    cli_args="-Dlog4j.configurationFile=${instdir}log4j2_112-116.xml"
fi

# 1.7-1.11.2 versions: Similar approach for these older versions
if [[ $(version "$mcver") -ge $(version "1.7") ]] && [[ $(version "$mcver") -le $(version "1.11.2") ]]; then
    wget https://launcher.mojang.com/v1/objects/dd2b723346a8dcd48e7f4d245f6bf09e98db9696/log4j2_17-111.xml -O "${instdir}log4j2_17-111.xml" >/dev/null 2>&1
    cli_args="-Dlog4j.configurationFile=${instdir}log4j2_17-111.xml"
fi

###############################################
# /Patch against exploit within Log4j
###############################################

###############################################
# Create the scripts
###############################################

dialog --infobox "Creating scripts..." 3 34
sleep 1

# Aikar's JVM optimization flags for Paper and others using the Aikar's flags
aikars_flags="-XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=true"

# Create the server run script
cat << EOF > "${instdir}server"
#!/bin/bash
user=\$(whoami)
if [[ \$user != '${user}' ]]; then
  echo "Cannot run as \${user} - expecting '${user}'"
  exit 1
fi
cd "\$(dirname "\$0")"

EOF

if [[ $flavor == "Cuberite" ]]; then
  echo "${instdir}Cuberite/Cuberite" >> "${instdir}server"
else
  if [[ $flavor == "Forge" ]]; then
    # Forge requires its own unix_args to be included
    forge_args="\$(ls ${instdir}libraries/net/minecraftforge/forge/*/unix_args.txt | head -n 1)"
    echo "exec java ${cli_args} -Xms${gamememMIN}M -Xmx${gamemem}M @${forge_args}" >> "${instdir}server"
  else
    echo "exec java ${cli_args} -Xms${gamememMIN}M -Xmx${gamemem}M ${aikars_flags} -jar \$(basename $jarfile) nogui" >> "${instdir}server"
  fi
fi
chmod +x "${instdir}server"

# Initialize server and EULA agreement
if [[ $upgrade -eq 0 ]] || [[ ! -e "${instdir}server.properties" ]]; then
  dialog --infobox "Initializing server..." 3 34
  sleep 1
  su - $user -c "${instdir}server" >/dev/null 2>&1
fi

# Accept the EULA if confirmed by the user
if [[ $eula == "accepted" ]]; then
  echo "# EULA accepted by user during installation ($eula_stamp)" > "${instdir}eula.txt"
  echo "eula=true" >> "${instdir}eula.txt"
fi

# Create the safe stop and safe reboot scripts
cat << EOF > "${instdir}stop"
#!/bin/bash
if [[ \$(/usr/bin/screen -list | grep -q Pinecraft) ]]; then
  echo "Stopping Minecraft Server. Please wait."
  /usr/bin/screen -S Pinecraft -p 0 -X stuff "stop^M"
  while /usr/bin/screen -list | grep -q Pinecraft; do
    printf "."
    sleep 3
  done
fi
echo "Minecraft Server stopped safely."
EOF

cat << EOF > "${instdir}reboot"
#!/bin/bash
if [[ \$EUID -ne 0 ]]; then
  echo "ERROR: This script must be run as root"
  exit 1
fi
'${instdir}'stop
echo "Rebooting..."
/sbin/reboot
EOF

chmod +x "${instdir}stop" "${instdir}reboot"

# Create or replace the system service for Pinecraft
cat << EOF > /etc/init.d/pinecraft
# System service script for Pinecraft
set -e

case "\$1" in
  stop)
    '${instdir}stop'
    ;;
  status)
    if /usr/bin/screen -list | grep -q Pinecraft; then
      echo "Running."
    else
      echo "Stopped."
    fi
    ;;
  *)
    echo "Usage: \$0 {stop|status}"
    exit 1
    ;;
esac
EOF

chmod +x /etc/init.d/pinecraft

# Set up the server to automatically stop on system shutdown or reboot
for rc in rc0.d rc6.d; do
  if [[ -L "/etc/${rc}/K01stop-pinecraft" ]]; then
    rm -f "/etc/${rc}/K01stop-pinecraft"
  fi
  ln -s "${instdir}stop" "/etc/${rc}/K01stop-pinecraft"
done

###############################################
# End of create the scripts
###############################################

###############################################
# Create config folders
###############################################

# Ensure the pid directory exists in /etc/pinecraft
pid_dir="/etc/pinecraft/pid"
if [[ ! -d $pid_dir ]]; then
  mkdir -p $pid_dir
fi

# Set ownership of the entire /etc/pinecraft directory to the specified user
chown -R "$user:$user" /etc/pinecraft/

###############################################
# /Create config folders
###############################################


###############################################
# Overclock
###############################################

if [[ $oc_volt -ne 0 ]]; then
  dialog --infobox "Overclocking your system..." 3 34
  sleep 1

  # Create a timestamped backup of the existing configuration file
  datestamp=$(date +"%Y-%m-%d_%H-%M-%S")
  cp "$configfile" "/boot/config-${datestamp}.txt"

  # Overclocking settings
  sed_overclock_setting() {
    local file="$1"
    local setting="$2"
    local value="$3"
    local current_setting

    current_setting=$(grep "^${setting}=" "$file")

    # If the setting already exists, replace it with the new value; otherwise, append it
    if [[ -n $current_setting ]]; then
      sed -i "s|^${setting}=.*|${setting}=${value}|" "$file"
    else
      echo "${setting}=${value}" >> "$file"
    fi
  }

  # Apply the overclock settings to the config file
  sed_overclock_setting "$configfile" "over_voltage" "$oc_volt"
  sed_overclock_setting "$configfile" "arm_freq" "$oc_freq"
  sed_overclock_setting "$configfile" "dtparam=audio" "off"
fi

###############################################
# /Overclock
###############################################


###############################################
# Tweak Server Configs
###############################################

# Define a reusable function to update server properties
update_property() {
  local file="$1"
  local property="$2"
  local value="$3"

  # Check if the property exists; replace it if so, otherwise append it
  if grep -q "^${property}=" "$file"; then
    sed -i "s|^${property}=.*|${property}=${value}|" "$file"
  else
    echo "${property}=${value}" >> "$file"
  fi
}

# Apply config changes to server.properties if it exists
if [[ -e "${instdir}server.properties" ]]; then
  dialog --infobox "Applying config..." 3 34
  sleep 1

  # Only makes changes during the first install (not an upgrade)
  if [[ $upgrade -eq 0 ]]; then
    # Set various server properties with respective predefined values for a new installation
    update_property "${instdir}server.properties" "enable-query" "true"
    update_property "${instdir}server.properties" "difficulty" "normal"
    update_property "${instdir}server.properties" "view-distance" "7"

    # Apply the level seed only if specified
    if [[ -n $seed ]]; then
      update_property "${instdir}server.properties" "level-seed" "$seed"
    fi
  fi

  # User-selected configurations applied whether it's a new install or an upgrade
  update_property "${instdir}server.properties" "gamemode" "$gamemode"
fi

###############################################
# /Tweak Server Configs
###############################################


# Create a file in the server directory to store the Pinecraft version
echo "$pcver" > "${instdir}cat5tv.ver"

# Notify the user that file ownership is being changed
dialog --infobox "Setting ownership..." 3 24 ; sleep 1

# Change ownership of the server directory and all its contents to the specified user
chown -R "$user:$user" "$instdir"

###############################################
# Install cronjob to auto-start server on boot
###############################################

# Backup the existing crontab to a temporary file
crontab -u "$user" -l > /tmp/cron.tmp 2>/dev/null
cronupdate=0

# Adjust the cron job for server auto-run based on user input
if [[ "$cron" == "1" ]]; then
  # Make sure a previous entry is removed
  sed -i~ "/${instdir//\//\\/}server/d" /tmp/cron.tmp

  # Add server to auto-run at boot if it's not already set
  if ! grep -q "${instdir}server" /tmp/cron.tmp; then
    dialog --infobox "Enabling auto-run..." 3 34
    sleep 1
    echo "@reboot /usr/bin/screen -dmS Pinecraft ${instdir}server > /dev/null 2>&1" >> /tmp/cron.tmp
    cronupdate=1
  fi
else
  # Disable auto-run if it was previously enabled
  sed -i~ "/${instdir//\//\\/}server/d" /tmp/cron.tmp
  cronupdate=1
fi

# Add the cron job for Pinecraft Server Interface if PSI is enabled
if [[ $psi -eq 1 ]]; then
  # Check if PSI is not already set up in cron
  if ! grep -q "pinecraft/psi/psi.php" /tmp/cron.tmp; then
    dialog --infobox "Enabling Pinecraft SI..." 3 34
    sleep 1
    php_path=$(type -p php)
    echo "@reboot $php_path -S 0.0.0.0:8088 -t /etc/pinecraft/psi/ > /dev/null 2>&1" >> /tmp/cron.tmp
    cronupdate=1
  fi
fi

# Apply new cron jobs if required
if [[ "$cronupdate" -eq 1 ]]; then
  crontab -u "$user" /tmp/cron.tmp
fi

# Remove temporary crontab file
rm /tmp/cron.tmp

###############################################
# /Install cronjob to auto-start server on boot
###############################################

###############################################
# Run the server now
###############################################

# Inform the user that the Minecraft server is being started
dialog --infobox "Starting the server..." 3 26

# Use 'screen' to start the server in a detached session as the specified user
su - "$user" -c "/usr/bin/screen -dmS Pinecraft ${instdir}server"

###############################################
# /Run the server now
###############################################

# Check for successful installation of Forge flavor
if [[ $flavor == "Forge" ]]; then
    if [[ ! -d ${instdir}mods ]]; then
        # The mods directory typically indicates Forge has been initialized
        rm -f "${instdir}server.properties"
        was_successful=0
    else
        was_successful=1
    fi
else
    # For other flavors, existence of server.properties file indicates success
    was_successful=$( [[ -e "${instdir}server.properties" ]] && echo 1 || echo 0 )
fi

# Provide the user with feedback based on the success of the installation
if [[ $was_successful -eq 1 ]]; then
    dialog --title "Success" --msgbox "\n$flavor Minecraft server installed successfully." 8 50
else
    dialog --title "Warning" --msgbox "\n$flavor has been installed but is not initializing correctly. There may be additional configuration required." 9 50
fi

# Final message to the user
clear
echo
echo "Installation complete."
echo
echo "Minecraft server is now running on $ip."
echo
echo "Note: World generation can take a few minutes. Please be patient."
echo
echo "For documentation, visit: https://github.com/Cat5TV/Pinecraft"
echo
